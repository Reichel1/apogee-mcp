generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // OAuth providers
  githubId   String? @unique @map("github_id")
  googleId   String? @unique @map("google_id")

  // Subscriptions
  subscription UserSubscription?
  
  // Team memberships
  teamMemberships TeamMember[]
  
  // Audit logs
  auditLogs AuditLog[]

  @@map("users")
}

model Team {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  plan      Plan     @default(FREE)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Stripe subscription
  stripeCustomerId     String? @unique @map("stripe_customer_id")
  stripeSubscriptionId String? @unique @map("stripe_subscription_id")

  // Team settings
  settings Json @default("{}")

  // Members
  members TeamMember[]
  
  // Sessions
  sessions Session[]
  
  // Audit logs  
  auditLogs AuditLog[]

  @@map("teams")
}

model TeamMember {
  id     String     @id @default(cuid())
  role   TeamRole   @default(MEMBER)
  userId String     @map("user_id")
  teamId String     @map("team_id")
  
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, teamId])
  @@map("team_members")
}

model Session {
  id        String      @id @default(cuid())
  name      String?
  teamId    String      @map("team_id")
  status    SessionStatus @default(ACTIVE)
  metadata  Json        @default("{}")
  
  team      Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  expiresAt DateTime?   @map("expires_at")

  // Session data
  todos     Json        @default("[]")
  commsLog  Json        @default("[]")
  writeFence String     @default("implementer") @map("write_fence")

  @@map("sessions")
}

model UserSubscription {
  id                   String  @id @default(cuid())
  userId               String  @unique @map("user_id")
  plan                 Plan
  stripeCustomerId     String  @map("stripe_customer_id")
  stripeSubscriptionId String  @map("stripe_subscription_id")
  
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@map("user_subscriptions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  teamId    String?  @map("team_id")
  sessionId String?  @map("session_id")
  
  action    String   // e.g., "tool.execute", "session.create", "team.invite"
  resource  String?  // e.g., "apogee.db.migrate", "session:123"
  details   Json     @default("{}")
  ip        String?
  userAgent String?  @map("user_agent")

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}

enum Plan {
  FREE
  PRO  
  ENTERPRISE
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum SessionStatus {
  ACTIVE
  PAUSED
  ARCHIVED
}